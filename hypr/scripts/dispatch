#!/bin/env python

import argparse
import subprocess
import sys
import json
import os

hyprctl = "hyprctl"

def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', metavar="cmd", type=str, help='hyprctl dispatch keyword')
    parser.add_argument('-m', '--monitor', type=int, help='numeric number for monitor, e.g 1 to specify eDP-1')
    # Add more arguments as needed

    args = parser.parse_args()
    args_dict = vars(args)  # Convert Namespace object to dictionary
    return {k: v for k, v in args_dict.items() if v is not None}

def get_active_workspace():
    command_output = subprocess.check_output(["hyprctl", "activeworkspace", "-j"], text=True)
    data = json.loads(command_output)
    return data

def get_active_window():
    command_output = subprocess.check_output(["hyprctl", "activewindow", "-j"], text=True)
    data = json.loads(command_output)
    return data

# This will return the monitor name base on the given numeric argument "mon".
# The order of priority in determining the monitor name is:
#   eDP-*
#   DP-*
#   HDMI-*-*
def get_monitor_name(mon: int):
    data = {}

    try:
        # Execute the hyprctl monitors command with -j argument and capture the JSON output
        command_output = subprocess.check_output(["hyprctl", "monitors", "-j"], text=True)
        data = json.loads(command_output)
    except subprocess.CalledProcessError:
        print("Error executing hyprctl monitors command")
        sys.exit(1)
    except json.JSONDecodeError:
        print("Error parsing JSON data from hyprctl monitors output")
        sys.exit(1)

    priority_order = {
        "eDP": 1,
        "DP": 2
    }

    displays = data

    hdmi_priority = 3  # Starting priority for HDMI monitors

    hdmi_display_names = []

    for display in displays:
        if display["name"].startswith("HDMI"):
            hdmi_display_names.append(display["name"])
            priority_order[display["name"]] = hdmi_priority
            hdmi_priority += 1

    hdmi_display_names.sort(key=lambda name: (name.split("-")[1], int(name.split("-")[2])))

    sorted_displays = sorted(displays, key=lambda display: (
        priority_order.get(display["name"].split("-")[0], float("inf")),  # Use float("inf") for unknown names
        display["name"]
    ))

    if mon < 1 or mon > len(sorted_displays):
        return "Invalid priority value"

    return sorted_displays[mon - 1]["name"]


def movecurrentworkspacetomonitor(mon: int):
    monitor = get_monitor_name(mon)
    activeworkspace = get_active_workspace()
    activewindow = get_active_window()
    # move the work space to monitor
    command = f"{hyprctl} dispatch moveworkspacetomonitor {activeworkspace['name']} {monitor}"
    subprocess.run(command, shell=True)
    # refocus the moved window
    window = f"address:{activewindow['address']}"
    command = f"{hyprctl} dispatch focuswindow {window}"
    subprocess.run(command, shell=True)

# dynamically bind the workspace to your primary monitor
def setup_monitors():
    monitor = get_monitor_name(1)
    workspace = f"# autogenerated from {__file__}#setup_monitors\n"
    workspace += "# this file should be generated from hyprland's exec-once hook\n"
    workspace += "# assigns new workspaces to the first monitor\n"
    workspace += "# then you can move the workspace to another monitor with MOD+SHIFT F1/F2/F3\n"
    workspace += f"\nworkspace=1,monitor:{monitor}"
    workspace += f"\nworkspace=2,monitor:{monitor}"
    workspace += f"\nworkspace=3,monitor:{monitor}"
    workspace += f"\nworkspace=4,monitor:{monitor}"
    workspace += f"\nworkspace=5,monitor:{monitor}"
    workspace += f"\nworkspace=6,monitor:{monitor}"
    workspace += f"\nworkspace=7,monitor:{monitor}"
    workspace += f"\nworkspace=8,monitor:{monitor}"
    workspace += f"\nworkspace=9,monitor:{monitor}"
    user_home = os.path.expanduser("~")
    config_path = os.path.join(user_home, ".config", "hypr", "workspaces.conf")
    file = open(config_path, "w")
    file.write(workspace)
    file.close()

if __name__ == '__main__':
    parsed_args = parse_arguments()
    if parsed_args["cmd"] == "movecurrentworkspacetomonitor":
        mon = parsed_args["monitor"]
        movecurrentworkspacetomonitor(mon)
    if parsed_args["cmd"] == "setupmons":
        setup_monitors()
    else:
        print("Invalid arguments")
        sys.exit(1)
